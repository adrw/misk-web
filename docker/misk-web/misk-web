#!/bin/sh

usage() {
  cat << EOF
  Usage :: misk-web <opts>

  Runs command on all @misk/ packages and tabs

  -h    Usage

  -a    'build' all, clean install and build tab

  -b    'build' *if directory hash is different* clean install and build tab

  -c    'clean' all build folders and caches

  -d    'start' webpack-dev-server on first found tab
        note: only run when docker container is mounted with a single tab

  -g    'ci-build', same as '-b' but without linting for faster CI builds

  -l    'lint' run Prettier linting

  -m    compute a md5 hash over the current directory and stores in .hash file
        exclude patterns: cachedUrls, lib, node_modules, .hash

  -n    no 'refresh' of local web/node_modules from Docker image /node_modules

  -r    'refresh' local web/node_modules from Docker image /node_modules

  -w    overide location for web mount point
        default: '/web'

  -x    run next option on all tabs *if directory hash is different*

  -z    run <optarg> command


  Must run script in the following directory structure
  For Docker container, mount localpath:...web/ -> /web/

  /web
    misk-build.sh
    node_modules/
    tabs/
      tab1/
        package.json
      tab2/
        package.json
      tab3/
        package.json
      ...
EOF
    exit 0
}

LABEL=""
CMD=""
WEB="/web"
HD="false"
REFRESH="true"

hashDir() {
    tar --exclude="cachedUrls" --exclude="lib" --exclude="node_modules" --exclude=".DS_Store" --exclude=".hash" --exclude="yarn.lock" -cf - . | md5sum 2>&1
}

hashDiff() {
    newHash=$(hashDir | sed 's/[[:space:]]//g')
    if [ -f .hash ]; then
        oldHash=$(sed 's/[[:space:]]//g' < .hash)
        if [ "$oldHash" = "$newHash" ]; then
            echo "${oldHash} ${newHash} false"
        else
            echo "${oldHash} ${newHash} true"
        fi
        
    else
        echo "${newHash} true"
    fi
}

hashDiffOutput() {
    oldHash=$(echo "$1" | sed 's/[[:space:]]//g')
    newHash=$(echo "$2" | sed 's/[[:space:]]//g')
    if [ "$oldHash" = "$newHash" ]; then
        echo "${oldHash} ${newHash} false"
    else
        echo "${oldHash} ${newHash} true"
    fi
}

hashDiffFiles() {
    oldHashFile="$1"
    newHashFile="$2"
    [ -f "$oldHashFile" ] || echo "true"
    [ -f "$newHashFile" ] || echo "true"
    hashDiffOutput "$(cat "$oldHashFile")" "$(cat "$newHashFile")"
}

stashNodeModules() {
    echo "[STASH] Removing tab node_modules and linking to node_modules from Docker image"
    # Remove any previous node_modules links or directories
    rm -f ./node_modules
    rm -rf ./node_modules
    # Link to cached node_modules in Docker image
    ln -s /node_modules .
    # Put @misk/dev/tsconfig.base.json where it needs to be
    mkdir -p /web/node_modules/@misk/dev/
    cp /node_modules/@misk/dev/tsconfig.base.json /web/node_modules/@misk/dev/
}

refreshNodeModules() {
    # Refresh node_modules if hash doesn't match, not in CI environments
    [ -z "$CI" ] && [ -d ${WEB}/node_modules ] && hashDiffFiles ${WEB}/node_modules/.hash /node_modules/.hash | grep -Fq "true" && echo "[INVALIDATE] Invalidate local web/node_modules/" && echo "" && rm -rf ${WEB}/node_modules
    # Install local web/node_modules if not already present, not in CI environments
    [ -z "$CI" ] && [ ! -d ${WEB}/node_modules ] && echo "[REFRESH] Installing local web/node_modules/ from Docker image" && echo "" && cp -rf /node_modules ${WEB}/node_modules
}

restoreNodeModules() {
    echo "[RESTORE] Restoring symlink of node_modules to local web/node_modules directory"
    # Relink back to web/node_modules
    ln -s ${WEB}/node_modules .
}

runCmd() {
    echo "[RUNCMD]: ${WEB}/*/* $LABEL HD: '$HD' CMD: '$CMD'"
    
    [ $REFRESH = "true" ] && refreshNodeModules
    
    for dir in ${WEB}/*/* ; do
        dir=${dir%*/}
        # Run cmd if directory has package.json
        if [ -d $dir ] && [ "$dir" = "${dir%"node_modules"*}" ] && [ -f "$dir/package.json" ]; then
            cd $dir || continue
            if [ "$HD" = "true" ]; then
                diffResult=$(hashDiff)
                echo "[HASH DIFF] $dir $diffResult"
                [ $REFRESH = "true" ] && stashNodeModules
                # Run command if hashdiff is different
                echo "$LABEL $dir" && echo "$diffResult" | grep -Fq "true" && $CMD
                # Run command anyways if there is no lib directory
                [ ! -d $dir/lib ] && echo "$LABEL $dir" && $CMD
            else
                [ $REFRESH = "true" ] && stashNodeModules
                # Run command if no hashdiff check required
                echo "$LABEL $dir" && $CMD
            fi
            [ $REFRESH = "true" ] && restoreNodeModules
            # Update hash after every command
            hashDir | tee .hash
            echo "[DONE]" && echo ""
        fi
    done
}

reset() {
    LABEL=""
    CMD=""
    HD="false"
    REFRESH="true"
}

while getopts "h?abcdglmnrwxz:" opt; do
    case "$opt" in
        h|\?)   usage && exit 0   ;;
        a)      LABEL="[BUILD ALL]" && CMD='miskweb build' && runCmd && reset   ;;
        b)      LABEL="[BUILD]" && HD="true" && CMD='miskweb build' && runCmd && reset   ;;
        c)      LABEL="[CLEAN]" && CMD='miskweb clean' && runCmd && reset    ;;
        d)      LABEL="[DEV]" && CMD='miskweb start' && runCmd && reset   ;;
        g)      LABEL="[CI-BUILD]" && HD="true" && CMD='miskweb ci-build' && runCmd && reset   ;;
        l)      LABEL="[LINT]" && CMD='miskweb lint' && runCmd && reset  ;;
        m)      hashDir | tee .hash   ;;
        n)      LABEL="[NO REFRESH]" && REFRESH="false" ;;
        r)      refreshNodeModules && restoreNodeModules && reset    ;;
        w)      LABEL="[ALT WEB LOCATION]" && WEB="${OPTARG}" && reset    ;;
        x)      LABEL="[HD=\"true\"]" && HD="true"    ;;
        z)      LABEL="[CMD]" && CMD="${OPTARG}" && runCmd && reset   ;;
    esac
done

exit 0
