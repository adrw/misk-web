// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dist bundle action.d.ts is unchanged 1`] = `
"export declare enum SIMPLENETWORK {
    DELETE = \\"SIMPLENETWORK_DELETE\\",
    FAILURE = \\"SIMPLENETWORK_FAILURE\\",
    GET = \\"SIMPLENETWORK_GET\\",
    HEAD = \\"SIMPLENETWORK_HEAD\\",
    PATCH = \\"SIMPLENETWORK_PATCH\\",
    POST = \\"SIMPLENETWORK_POST\\",
    PUT = \\"SIMPLENETWORK_PUT\\",
    SUCCESS = \\"SIMPLENETWORK_SUCCESS\\"
}
export declare enum SIMPLEFORM {
    INPUT = \\"SIMPLEFORM_INPUT\\",
    FAILURE = \\"SIMPLEFORM_FAILURE\\",
    NUMBER = \\"SIMPLEFORM_NUMBER\\",
    SUCCESS = \\"SIMPLEFORM_SUCCESS\\",
    TOGGLE = \\"SIMPLEFORM_TOGGLE\\"
}
"
`;

exports[`Dist bundle dispatch.d.ts is unchanged 1`] = `
"import { AxiosResponse, AxiosRequestConfig } from \\"axios\\";
import { IDefaultState, IAction } from \\"./utilities\\";
import { SIMPLEFORM, SIMPLENETWORK } from \\"./action\\";
export interface ISimpleNetworkPayloadTag extends IDefaultState, AxiosResponse {
    requestConfig: AxiosRequestConfig;
    tag: string;
    url: string;
}
export interface ISimpleNetworkPayload {
    [tag: string]: ISimpleNetworkPayloadTag;
}
export interface IDispatchSimpleNetwork {
    simpleNetworkDelete: (tag: string, url: string, requestConfig?: AxiosRequestConfig) => IAction<SIMPLENETWORK.DELETE, ISimpleNetworkPayload>;
    simpleNetworkFailure: (tag: string, url: string, error: any, requestConfig?: AxiosRequestConfig) => IAction<SIMPLENETWORK.FAILURE, ISimpleNetworkPayload>;
    simpleNetworkGet: (tag: string, url: string, requestConfig?: AxiosRequestConfig) => IAction<SIMPLENETWORK.GET, ISimpleNetworkPayload>;
    simpleNetworkHead: (tag: string, url: string, requestConfig?: AxiosRequestConfig) => IAction<SIMPLENETWORK.HEAD, ISimpleNetworkPayload>;
    simpleNetworkPatch: (tag: string, url: string, data: any, requestConfig?: AxiosRequestConfig) => IAction<SIMPLENETWORK.PATCH, ISimpleNetworkPayload>;
    simpleNetworkPost: (tag: string, url: string, data: any, requestConfig?: AxiosRequestConfig) => IAction<SIMPLENETWORK.POST, ISimpleNetworkPayload>;
    simpleNetworkPut: (tag: string, url: string, data: any, requestConfig?: AxiosRequestConfig) => IAction<SIMPLENETWORK.PUT, ISimpleNetworkPayload>;
    simpleNetworkSuccess: (tag: string, url: string, response: AxiosResponse, requestConfig?: AxiosRequestConfig) => IAction<SIMPLENETWORK.SUCCESS, ISimpleNetworkPayload>;
}
export declare const dispatchSimpleNetwork: IDispatchSimpleNetwork;
export interface ISimpleFormPayloadTag extends IDefaultState {
    oldToggle?: string | boolean;
    tag: string;
    valueAsString?: string;
    valueAsNumber?: number;
}
export interface ISimpleFormPayload {
    [tag: string]: ISimpleFormPayloadTag;
}
export interface IDispatchSimpleForm {
    simpleFormFailure: (tag: string, error: any) => IAction<SIMPLEFORM.FAILURE, ISimpleFormPayload>;
    simpleFormInput: (tag: string, data: any) => IAction<SIMPLEFORM.INPUT, ISimpleFormPayload>;
    simpleFormNumber: (tag: string, valueAsNumber: number, valueAsString: string) => IAction<SIMPLEFORM.NUMBER, ISimpleFormPayload>;
    simpleFormSuccess: (tag: string, data: any) => IAction<SIMPLEFORM.SUCCESS, ISimpleFormPayload>;
    simpleFormToggle: (tag: string, oldState: any) => IAction<SIMPLEFORM.TOGGLE, ISimpleFormPayload>;
}
export declare const dispatchSimpleForm: IDispatchSimpleForm;
"
`;

exports[`Dist bundle reducer.d.ts is unchanged 1`] = `
"import { IAction, IRootState } from \\"./utilities\\";
import { SIMPLEFORM, SIMPLENETWORK } from \\"./action\\";
import { ISimpleFormPayload, ISimpleNetworkPayload } from \\"./dispatch\\";
export declare function SimpleNetworkReducer(state: any, action: IAction<SIMPLENETWORK, {}>): any;
export interface ISimpleNetworkState extends IRootState {
    [tag: string]: any | ISimpleNetworkPayload;
}
export interface ISimpleNetworkImmutableState {
    toJS: () => ISimpleNetworkState;
}
export declare function SimpleFormReducer(state: any, action: IAction<SIMPLEFORM, {}>): any;
export interface ISimpleFormState extends IRootState {
    [tag: string]: any | ISimpleFormPayload;
}
export interface ISimpleFormImmutableState {
    toJS: () => ISimpleFormState;
}
"
`;

exports[`Dist bundle saga.d.ts is unchanged 1`] = `
"import { SimpleReduxSaga } from \\"./utilities\\";
export declare function watchSimpleNetworkSagas(): SimpleReduxSaga;
export declare function watchSimpleFormSagas(): SimpleReduxSaga;
"
`;

exports[`Dist bundle utilities.d.ts is unchanged 1`] = `
"import { History, Location } from \\"history\\";
import { Map } from \\"immutable\\";
import { match } from \\"react-router\\";
import { ForkEffectDescriptor, SimpleEffect } from \\"redux-saga/effects\\";
import { ParametricSelector } from \\"reselect\\";
export interface CombinatorEffect<T, E> {
    \\"@@redux-saga/IO\\": true;
    combinator: true;
    type: T;
    payload: CombinatorEffectDescriptor<E>;
}
export declare type CombinatorEffectDescriptor<E> = {
    [key: string]: E;
} | E[];
export declare type SimpleReduxSaga = IterableIterator<CombinatorEffect<\\"ALL\\", SimpleEffect<\\"FORK\\", ForkEffectDescriptor>>>;
export interface IRouterProvidedProps {
    history?: History;
    location?: Location;
    match?: match;
}
export interface IDefaultState {
    data: any;
    error: any;
    loading: boolean;
    success: boolean;
}
export interface IRootState {
    simpleTag: string;
}
export interface IDefaultRootState extends IDefaultState, IRootState {
}
export declare const defaultState: any;
export declare const defaultRootState: (simpleTag: string) => any;
export interface IAction<T, P> {
    readonly type: T;
    readonly payload?: P;
}
export declare function createAction<T extends string, P>(type: T, payload: P): IAction<T, P>;
export declare const errorMessage: (error: any) => any;
export declare const selectSubState: <IState extends {
    [key: string]: ISubState;
}, ISubState extends {
    [key: string]: any;
}>(domain: string) => (state: IState) => ISubState;
export declare const selectRawSubState: <IState extends Map<string, any>, ISubState extends {
    [key: string]: any;
}>(domain: string) => (state: IState) => ISubState;
export declare const simpleRootRawSelector: <IState extends Map<string, any>, ISubState>(domain: string, state: IState) => any;
export declare const simpleRootSelector: <IState extends {
    [key: string]: any;
}, ISubState extends {
    toJS: () => IRootState;
}>(domain: string, state: IState) => any;
export declare const enum simpleType {
    array = 0,
    boolean = 1,
    number = 2,
    object = 3,
    string = 4,
    tags = 5
}
export declare const simpleSelect: <IState extends {
    [key: string]: any;
}, ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subState: any, tagFilter: string, tagKeysFilter?: string, returnType?: any, subStateSelector?: any) => any;
export declare const simpleSelectorGet: <IState extends {
    [key: string]: any;
}, ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subState: any, path: string | string[], defaultValue?: any) => any;
export declare const createSimpleSelectorGet: <ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subStateSelector: (state: any) => ISubState, path: string | string[], defaultValue?: any) => ParametricSelector<ISubState, string | string[], any | ISubPayload | ISubPayload[]>;
export declare const simpleSelectorPick: <IState extends {
    [key: string]: any;
}, ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subState: any, paths: string | string[]) => any;
export declare const createSimpleSelectorPick: <ISubState extends {
    [key: string]: any;
}, ISubPayload extends {
    [key: string]: any;
}>(subStateSelector: (state: any) => ISubState, paths: string | string[]) => ParametricSelector<ISubState, string | String[], any | ISubPayload | ISubPayload[]>;
export declare const onClickFnCall: (callFn: any, ...args: any) => (event: any) => void;
export declare const onChangeFnCall: (callFn: any, ...args: any) => (event: any) => void;
export declare const onChangeToggleFnCall: (callFn: any, ...args: any) => (event: any) => void;
export declare const onChangeNumberFnCall: (callFn: any, ...args: any) => (valueAsNumber: number, valueAsString: string) => void;
export declare const onChangeTagFnCall: (callFn: any, ...args: any) => (values: string[]) => void;
export declare const booleanToggle: (oldState: string | boolean) => boolean;
export declare const getFirstTag: <T = {
    [key: string]: any;
}>(payload: {
    [key: string]: T;
}) => T;
export declare const jsonOrString: (json: string) => any;
"
`;
